#include <iostream>
class Complex {
private:
 double real; // Real part
 double imag; // Imaginary part
public:
 Complex() : real(0), imag(0) {}
 Complex(double r, double i) : real(r), imag(i) {}
 Complex operator+(const Complex& other) const {
 return Complex(real + other.real, imag + other.imag);
 }
 Complex operator*(const Complex& other) const {
 return Complex(real * other.real - imag * other.imag, 
 real * other.imag + imag * other.real);
 }
 friend std::ostream& operator<<(std::ostream& os, const Complex& c) {
 os << c.real;
 if (c.imag >= 0) {
 os << " + " << c.imag << "i";
 } else {
 os << " - " << -c.imag << "i";
 }
 return os;
 }
 friend std::istream& operator>>(std::istream& is, Complex& c) {
 std::cout << "Enter real part: ";
 is >> c.real;
 std::cout << "Enter imaginary part: ";
 is >> c.imag;
 return is;
}

};

int main() {

 Complex c1, c2;

 std::cout << "Enter first complex number:\n";

 std::cin >> c1;

 std::cout << "Enter second complex number:\n";

 std::cin >> c2;

 Complex sum = c1 + c2;

 std::cout << "Sum: " << sum << std::endl;

 Complex product = c1 * c2;

 std::cout << "Product: " << product << std::endl;

 return 0; // Exit successfully
